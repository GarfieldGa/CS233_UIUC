$date
	Fri Sep 27 14:56:13 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module decoder_test $end
$var wire 1 ! writeenable $end
$var wire 1 " word_we $end
$var wire 1 # slt $end
$var wire 1 $ rd_src $end
$var wire 1 % mem_read $end
$var wire 1 & lui $end
$var wire 1 ' except $end
$var wire 2 ( control_type [1:0] $end
$var wire 1 ) byte_we $end
$var wire 1 * byte_load $end
$var wire 1 + alu_src2 $end
$var wire 3 , alu_op [2:0] $end
$var wire 1 - addm $end
$var reg 6 . funct [5:0] $end
$var reg 6 / opcode [5:0] $end
$var reg 1 0 zero $end
$scope module decoder $end
$var wire 1 1 ADD $end
$var wire 1 2 ADDM $end
$var wire 1 3 AND $end
$var wire 1 4 JR $end
$var wire 1 5 NOR $end
$var wire 1 6 OR $end
$var wire 1 7 SLT $end
$var wire 1 8 SUB $end
$var wire 1 9 XOR $end
$var wire 1 - addm $end
$var wire 1 + alu_src2 $end
$var wire 1 * byte_load $end
$var wire 1 ) byte_we $end
$var wire 1 ' except $end
$var wire 6 : funct [5:0] $end
$var wire 1 & lui $end
$var wire 1 % mem_read $end
$var wire 6 ; opcode [5:0] $end
$var wire 1 $ rd_src $end
$var wire 1 # slt $end
$var wire 1 " word_we $end
$var wire 1 ! writeenable $end
$var wire 1 0 zero $end
$var wire 2 < control_type [1:0] $end
$var wire 3 = alu_op [2:0] $end
$var wire 1 > XORI $end
$var wire 1 ? SW $end
$var wire 1 @ SB $end
$var wire 1 A ORI $end
$var wire 1 B LW $end
$var wire 1 C LUI $end
$var wire 1 D LBU $end
$var wire 1 E J $end
$var wire 1 F BNE $end
$var wire 1 G BEQ $end
$var wire 1 H ANDI $end
$var wire 1 I ADDI $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0I
0H
0G
0F
0E
0D
0C
0B
0A
0@
0?
0>
b10 =
b0 <
b0 ;
b100000 :
09
08
07
06
05
04
03
02
11
00
b0 /
b100000 .
0-
b10 ,
0+
0*
0)
b0 (
0'
0&
0%
0$
0#
0"
1!
$end
#10
b11 ,
b11 =
01
18
b100010 .
b100010 :
#20
1$
1+
b0 ,
b0 =
0!
08
b10 (
b10 <
1E
b10 /
b10 ;
#30
b0 (
b0 <
0E
1"
1?
b101011 /
b101011 ;
#40
0$
0+
b10 ,
b10 =
1!
1-
12
b101100 .
b101100 :
0"
0?
b0 /
b0 ;
#50
0!
b0 ,
b0 =
0'
b11 (
b11 <
14
0-
02
b1000 .
b1000 :
#60
0'
b11 ,
b11 =
0!
b0 (
b0 <
04
1G
b100 /
b100 ;
#70
b1 (
b1 <
10
#80
