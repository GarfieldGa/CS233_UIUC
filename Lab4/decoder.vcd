$date
	Tue Sep 17 19:09:03 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module decoder_test $end
$var wire 1 ! writeenable $end
$var wire 1 " rd_src $end
$var wire 1 # except $end
$var wire 1 $ alu_src2 $end
$var wire 3 % alu_op [2:0] $end
$var reg 6 & funct [5:0] $end
$var reg 6 ' opcode [5:0] $end
$scope module decoder $end
$var wire 1 ( ADD $end
$var wire 1 ) AND $end
$var wire 1 * NOR $end
$var wire 1 + OR $end
$var wire 1 , SUB $end
$var wire 1 - XOR $end
$var wire 1 $ alu_src2 $end
$var wire 1 # except $end
$var wire 6 . funct [5:0] $end
$var wire 6 / opcode [5:0] $end
$var wire 1 " rd_src $end
$var wire 1 ! writeenable $end
$var wire 3 0 alu_op [2:0] $end
$var wire 1 1 XORI $end
$var wire 1 2 ORI $end
$var wire 1 3 ANDI $end
$var wire 1 4 ADDI $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
04
03
02
01
b10 0
b0 /
b100000 .
0-
0,
0+
0*
0)
1(
b0 '
b100000 &
b10 %
0$
0#
0"
1!
$end
#10
b11 %
b11 0
0(
1,
b100010 &
b100010 .
#20
b101 %
b101 0
0,
1+
b100101 &
b100101 .
#30
1!
0#
b100 %
b100 0
1)
0+
b100100 &
b100100 .
#40
b110 %
b110 0
0)
1*
b100111 &
b100111 .
#50
b111 %
b111 0
0*
1-
b100110 &
b100110 .
#60
b101 %
b101 0
1"
1$
0-
12
b1101 '
b1101 /
#70
1!
0#
b10 %
b10 0
14
02
b1000 '
b1000 /
#80
b111 %
b111 0
04
11
b1110 '
b1110 /
#90
b100 %
b100 0
1!
0#
13
01
b1100 '
b1100 /
#100
0!
1#
0"
0$
b0 %
b0 0
b1 &
b1 .
03
b0 '
b0 /
#110
